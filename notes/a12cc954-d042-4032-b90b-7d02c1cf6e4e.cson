createdAt: "2018-07-13T01:50:43.250Z"
updatedAt: "2018-07-13T02:17:04.855Z"
type: "MARKDOWN_NOTE"
folder: "baaec5048cb0144c6e19"
title: "正则表达式的分类"
content: '''
  正则表达式的分类
  
  1、基本的正则表达式（Basic Regular Expression 又叫Basic RegEx 简称BREs）
  2、扩展的正则表达式（Extended Regular Expression 又叫Extended RegEx 简称EREs）
  3、Perl的正则表达式（Perl Regular Expression 又叫Perl RegEx 简称PREs）
  
  > 具体的可以参考这篇文章：www.jb51.net/tools/shell_regex.html
  
  ![shell正则](http://pbmogtn5t.bkt.clouddn.com/shell_%E6%AD%A3%E5%88%99.png)
  
  shell常用正则表达式
  
  ```sh
  "^\\d+$" //非负整数（正整数 + 0）  
  "^[0-9]*[1-9][0-9]*$" //正整数  
  "^((-\\d+)|(0+))$" //非正整数（负整数 + 0）  
  "^-[0-9]*[1-9][0-9]*$" //负整数  
  "^-?\\d+$" //整数  
  "^\\d+(\\.\\d+)?$" //非负浮点数（正浮点数 + 0）  
  "^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$" //正浮点数  
  "^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$" //非正浮点数（负浮点数 + 0）  
  "^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$" //负浮点数  
  "^(-?\\d+)(\\.\\d+)?$" //浮点数  
  "^[A-Za-z]+$" //由26个英文字母组成的字符串  
  "^[A-Z]+$" //由26个英文字母的大写组成的字符串  
  "^[a-z]+$" //由26个英文字母的小写组成的字符串  
  "^[A-Za-z0-9]+$" //由数字和26个英文字母组成的字符串  
  "^\\w+$" //由数字、26个英文字母或者下划线组成的字符串  
  "^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$" //email地址  
  "^[a-zA-z]+://(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$" //url  
  /^(d{2}|d{4})-((0([1-9]{1}))|(1[1|2]))-(([0-2]([1-9]{1}))|(3[0|1]))$/   //  年-月-日  
  /^((0([1-9]{1}))|(1[1|2]))/(([0-2]([1-9]{1}))|(3[0|1]))/(d{2}|d{4})$/   // 月/日/年  
  "^([w-.]+)@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.)|(([w-]+.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(]?)$"   //Emil  
  /^((\\+?[0-9]{2,4}\\-[0-9]{3,4}\\-)|([0-9]{3,4}\\-))?([0-9]{7,8})(\\-[0-9]+)?$/     //电话号码  
  "^(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5])$"   //IP地址 
  ```
  
  匹配中文字符的正则表达式： `[\\u4e00-\\u9fa5]`  
  匹配双字节字符(包括汉字在内)：`[^\\x00-\\xff]  `
  匹配空行的正则表达式：`\\n[\\s| ]*\\r`  
  匹配HTML标记的正则表达式：`/<(.*)>.*<\\/\\1>|<(.*) \\/>/  `
  匹配首尾空格的正则表达式：`(^\\s*)|(\\s*$)` 
  匹配Email地址的正则表达式：`\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*`
  匹配网址URL的正则表达式：`^[a-zA-z]+://(\\\\w+(-\\\\w+)*)(\\\\.(\\\\w+(-\\\\w+)*))*(\\\\?\\\\S*)?$`  
  匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：`^[a-zA-Z][a-zA-Z0-9_]{4,15}$`  
  匹配国内电话号码：`(\\d{3}-|\\d{4}-)?(\\d{8}|\\d{7})? ` 
  匹配腾讯QQ号：`^[1-9]*[1-9][0-9]*$` 
  
  
  元字符及其在正则表达式上下文中的行为： 
  \\ 将下一个字符标记为一个特殊字符、或一个原义字符、或一个后向引用、或一个八进制转义符。 
  ^ 匹配输入字符串的开始位置。如果设置了 RegExp 对象的Multiline 属性，^ 也匹配 '\\n' 或 '\\r' 之后的位置。  
  $ 匹配输入字符串的结束位置。如果设置了 RegExp 对象的Multiline 属性，$ 也匹配 '\\n' 或 '\\r' 之前的位置。 
  `*` 匹配前面的子表达式零次或多次。 
  `+` 匹配前面的子表达式一次或多次。+ 等价于 {1,}。 
  ? 匹配前面的子表达式零次或一次。? 等价于 {0,1}。 
  {n} n 是一个非负整数，匹配确定的n 次。 
  {n,} n 是一个非负整数，至少匹配n 次。 
  {n,m} m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。在逗号和两个数之间不能有空格。 
  ? 当该字符紧跟在任何一个其他限制符` (*, +, ?, {n}, {n,}, {n,m}) `后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。 
  . 匹配除 “\\n” 之外的任何单个字符。要匹配包括 '\\n' 在内的任何字符，请使用象 `'[.\\n]'` 的模式。  
  (pattern) 匹配pattern 并获取这一匹配。 
  (?:pattern) 匹配pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。 
  (?=pattern) 正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。 
  (?!pattern) 负向预查，与(?=pattern)作用相反 
  x|y 匹配 x 或 y。 
  `[xyz]` 字符集合。 
  
'''
tags: []
isStarred: false
isTrashed: false
