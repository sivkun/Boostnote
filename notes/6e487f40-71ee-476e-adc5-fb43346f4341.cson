createdAt: "2018-07-08T15:23:15.365Z"
updatedAt: "2018-07-08T15:31:37.132Z"
type: "MARKDOWN_NOTE"
folder: "b4bf337c6c500d896748"
title: "webpack4"
content: '''
  # webpack4
  [webpack4.x入门配置 - 简书](https://www.jianshu.com/p/6712e4e4b8fe)
  ```js
  const path = require('path')
  const uglify = require('uglifyjs-webpack-plugin');
  const htmlPlugin = require('html-webpack-plugin')
  const extractTextPlugin = require('extract-text-webpack-plugin')
  const glob = require('glob');
  const PurifyCSSPlugin = require("purifycss-webpack");
  var website = {
      publicPath: "http://localhost:3000/"
  }
  
  module.exports = {
      mode: 'development',
      entry: {
          main: "./src/main.js",//路径相对于根目录
      },
      output: {
          path: path.resolve(__dirname, '../dist'),
          filename: '[name].bundle.js',
          publicPath: website.publicPath  //publicPath：主要作用就是处理静态文件路径的。
      },
      module: {
          rules: [
              //babel 配置
              {
                  test: /\\.(jsx|js)$/,
                  use: {
                      loader: 'babel-loader',
                  },
                  exclude: /node_modules/
              },
              {
                  test: /\\.scss$/,
                  use: extractTextPlugin.extract({
                      use: [{
                          loader: "css-loader"
                      }, {
                          loader: "sass-loader"
                      }],
                      // use style-loader in development
                      fallback: "style-loader"
                  })
              },
              //less loader
              {
                  test: /\\.less$/,
                  use: extractTextPlugin.extract({
                      use: [{
                          loader: "css-loader"
                      }, {
                          loader: "less-loader"
                      }],
                      // use style-loader in development
                      fallback: "style-loader"
                  })
                  //     [{
                  //            loader: "style-loader" // creates style nodes from JS strings
                  //         }, 
                  //         {
                  //             loader: "css-loader" // translates CSS into CommonJS
                  //         },
                  //         {
                  //             loader: "less-loader" // compiles Less to CSS
                  //    }]
              },
              {
                  test: /\\.css$/,
                  use: extractTextPlugin.extract({
                      fallback: "style-loader",
                      use: [{ loader: "css-loader" },
                      {
                          loader: "postcss-loader",
                      },
                      ]
                  })
                  // css分离后这里需要重新配置，下面就注释了
                  // use:[
                  //     {loader: "style-loader"},   
                  //     {loader:"css-loader"}
                  // ]
              }, /**
              * file-loader：解决引用路径的问题，拿background样式用url引入背景图来说，我们都知道，
              * webpack最终会将各个模块打包成一个文件，因此我们样式中的url路径是相对入口html页面的，
              * 而不是相对于原始css文件所在的路径的。这就会导致图片引入失败。这个问题是用file-loader解决的，
              * file-loader可以解析项目中的url引入（不仅限于css），根据我们的配置，将图片拷贝到相应的路径，
              * 再根据我们的配置，修改打包后文件引用路径，使之指向正确的文件
              * url-loader：如果图片较多，会发很多http请求，会降低页面性能。这个问题可以通过url-loader解决。
              * url-loader会将引入的图片编码，生成dataURl。相当于把图片数据翻译成一串字符。再把这串字符打包到文件中，
              * 最终只需要引入这个文件就能访问图片了。当然，如果图片较大，编码会消耗性能。因此url-loader提供了一个limit参数，
              * 小于limit字节的文件会被转为DataURl，大于limit的还会使用file-loader进行copy。
              * 注意：为什么只使用了url-loader
              * 有的小伙伴会发现我们并没有在webpack.dev.config.js中使用file-loader，但是依然打包成功了。
              * 我们需要了解file-loader和url-loader的关系。url-loader和file-loader是什么关系呢？
              * 简答地说，url-loader封装了file-loader。url-loader不依赖于file-loader，即使用url-loader时，
              * 只需要安装url-loader即可，不需要安装file-loader，因为url-loader内置了file-loader。通过上面的介绍，
              * 我们可以看到，url-loader工作分两种情况：
              * 1.文件大小小于limit参数，url-loader将会把文件转为DataURL（Base64格式）；
              * 2.文件大小大于limit，url-loader会调用file-loader进行处理，参数也会直接传给file-loader。
              * 也就是说，其实我们只安装一个url-loader就可以了。但是为了以后的操作方便，我们这里就顺便安装上file-loader。
              */
              //图片 loader
              {
                  test: /\\.(png|jpg|gif|jpeg)/,  //是匹配图片文件后缀名称
                  use: [{
                      loader: 'url-loader', //是指定使用的loader和loader的配置参数
                      options: {
                          limit: 8912, //是把小于8912B的文件打成Base64的格式，写入JS
                          outputPath: 'images/'   // 图片打包后存放的目录
                      }
                  }]
              }, {
                  test: /\\.(htm|html)$/i,
                  use: ['html-withimg-loader']
              }
  
  
  
          ]
      },
      plugins: [
          new uglify(),
          new htmlPlugin({
              minify: { //是对html文件进行压缩
                  removeAttributeQuotes: true  //removeAttrubuteQuotes是却掉属性的双引号。
              },
              hash: true, //为了开发中js有缓存效果，所以加入hash，这样可以有效避免缓存JS。
              template: './src/index.html' //是要打包的html模版路径和文件名称。
  
          }),
          new extractTextPlugin("css/index.css"), //这里的/css/index.css 是分离后的路径
          new PurifyCSSPlugin({
              //这里配置了一个paths，主要是需找html模板，purifycss根据这个配置会遍历你的文件，查找哪些css被使用了。
              paths: glob.sync(path.join(__dirname, 'src/*.html')),
          }),
      ],
      devServer: {
          contentBase: path.resolve(__dirname, '../dist'),//设置devserver的根目录
          host: 'localhost',
          compress: true,//压缩
          port: 3000
  
      }
  }
  ```
  
'''
tags: [
  "webpack4"
]
isStarred: false
isTrashed: false
